{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\nimport { AuthError } from \"../error/AuthError\";\n/**\n * @hidden\n */\n\nvar BrowserStorage =\n/** @class */\nfunction () {\n  function BrowserStorage(cacheLocation) {\n    if (!window) {\n      throw AuthError.createNoWindowObjectError(\"Browser storage class could not find window object\");\n    }\n\n    var storageSupported = typeof window[cacheLocation] !== \"undefined\" && window[cacheLocation] != null;\n\n    if (!storageSupported) {\n      throw ClientConfigurationError.createStorageNotSupportedError(cacheLocation);\n    }\n\n    this.cacheLocation = cacheLocation;\n  }\n  /**\n   * add value to storage\n   * @param key\n   * @param value\n   * @param enableCookieStorage\n   */\n\n\n  BrowserStorage.prototype.setItem = function (key, value, enableCookieStorage) {\n    window[this.cacheLocation].setItem(key, value);\n\n    if (enableCookieStorage) {\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\n   * get one item by key from storage\n   * @param key\n   * @param enableCookieStorage\n   */\n\n\n  BrowserStorage.prototype.getItem = function (key, enableCookieStorage) {\n    if (enableCookieStorage && this.getItemCookie(key)) {\n      return this.getItemCookie(key);\n    }\n\n    return window[this.cacheLocation].getItem(key);\n  };\n  /**\n   * remove value from storage\n   * @param key\n   */\n\n\n  BrowserStorage.prototype.removeItem = function (key) {\n    return window[this.cacheLocation].removeItem(key);\n  };\n  /**\n   * clear storage (remove all items from it)\n   */\n\n\n  BrowserStorage.prototype.clear = function () {\n    return window[this.cacheLocation].clear();\n  };\n  /**\n   * add value to cookies\n   * @param cName\n   * @param cValue\n   * @param expires\n   */\n\n\n  BrowserStorage.prototype.setItemCookie = function (cName, cValue, expires) {\n    var cookieStr = cName + \"=\" + cValue + \";\";\n\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n\n    document.cookie = cookieStr;\n  };\n  /**\n   * get one item by key from cookies\n   * @param cName\n   */\n\n\n  BrowserStorage.prototype.getItemCookie = function (cName) {\n    var name = cName + \"=\";\n    var ca = document.cookie.split(\";\");\n\n    for (var i = 0; i < ca.length; i++) {\n      var c = ca[i];\n\n      while (c.charAt(0) === \" \") {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) === 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  };\n  /**\n   * Clear an item in the cookies by key\n   * @param cName\n   */\n\n\n  BrowserStorage.prototype.clearItemCookie = function (cName) {\n    this.setItemCookie(cName, \"\", -1);\n  };\n  /**\n   * Get cookie expiration time\n   * @param cookieLifeDays\n   */\n\n\n  BrowserStorage.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * 24 * 60 * 60 * 1000);\n    return expr.toUTCString();\n  };\n\n  return BrowserStorage;\n}();\n\nexport { BrowserStorage };","map":null,"metadata":{},"sourceType":"module"}