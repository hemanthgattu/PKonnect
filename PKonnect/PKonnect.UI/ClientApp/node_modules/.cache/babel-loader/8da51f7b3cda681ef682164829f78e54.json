{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { ClientAuthError } from \"./ClientAuthError\";\nexport var ClientConfigurationErrorMessage = {\n  configurationNotSet: {\n    code: \"no_config_set\",\n    desc: \"Configuration has not been set. Please call the UserAgentApplication constructor with a valid Configuration object.\"\n  },\n  storageNotSupported: {\n    code: \"storage_not_supported\",\n    desc: \"The value for the cacheLocation is not supported.\"\n  },\n  noRedirectCallbacksSet: {\n    code: \"no_redirect_callbacks\",\n    desc: \"No redirect callbacks have been set. Please call handleRedirectCallback() with the appropriate function arguments before continuing. \" + \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n  },\n  invalidCallbackObject: {\n    code: \"invalid_callback_object\",\n    desc: \"The object passed for the callback was invalid. \" + \"More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics.\"\n  },\n  scopesRequired: {\n    code: \"scopes_required\",\n    desc: \"Scopes are required to obtain an access token.\"\n  },\n  emptyScopes: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as empty array.\"\n  },\n  nonArrayScopes: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientScope: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent' and 'none'\"\n  },\n  invalidAuthorityType: {\n    code: \"invalid_authority_type\",\n    desc: \"The given authority is not a valid type of authority supported by MSAL. Please see here for valid authorities: <insert URL here>.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.\"\n  },\n  authorityUriInvalidPath: {\n    code: \"authority_uri_invalid_path\",\n    desc: \"Given authority URI is invalid.\"\n  },\n  unsupportedAuthorityValidation: {\n    code: \"unsupported_authority_validation\",\n    desc: \"The authority validation is not supported for this authority type.\"\n  },\n  b2cAuthorityUriInvalidPath: {\n    code: \"b2c_authority_uri_invalid_path\",\n    desc: \"The given URI for the B2C authority is invalid.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  emptyRequestError: {\n    code: \"empty_request_error\",\n    desc: \"Request object is required.\"\n  },\n  invalidCorrelationIdError: {\n    code: \"invalid_guid_sent_as_correlationId\",\n    desc: \"Please set the correlationId as a valid guid\"\n  },\n  telemetryConfigError: {\n    code: \"telemetry_config_error\",\n    desc: \"Telemetry config is not configured with required values\"\n  }\n};\n/**\n * Error thrown when there is an error in configuration of the .js library.\n */\n\nvar ClientConfigurationError =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(ClientConfigurationError, _super);\n\n  function ClientConfigurationError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\n    return _this;\n  }\n\n  ClientConfigurationError.createNoSetConfigurationError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.configurationNotSet.code, \"\" + ClientConfigurationErrorMessage.configurationNotSet.desc);\n  };\n\n  ClientConfigurationError.createStorageNotSupportedError = function (givenCacheLocation) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.storageNotSupported.code, ClientConfigurationErrorMessage.storageNotSupported.desc + \" Given location: \" + givenCacheLocation);\n  };\n\n  ClientConfigurationError.createRedirectCallbacksNotSetError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.noRedirectCallbacksSet.code, ClientConfigurationErrorMessage.noRedirectCallbacksSet.desc);\n  };\n\n  ClientConfigurationError.createInvalidCallbackObjectError = function (callbackObject) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCallbackObject.code, ClientConfigurationErrorMessage.invalidCallbackObject.desc + \" Given value for callback function: \" + callbackObject);\n  };\n\n  ClientConfigurationError.createEmptyScopesArrayError = function (scopesValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopes.code, ClientConfigurationErrorMessage.emptyScopes.desc + \" Given value: \" + scopesValue + \".\");\n  };\n\n  ClientConfigurationError.createScopesNonArrayError = function (scopesValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.nonArrayScopes.code, ClientConfigurationErrorMessage.nonArrayScopes.desc + \" Given value: \" + scopesValue + \".\");\n  };\n\n  ClientConfigurationError.createClientIdSingleScopeError = function (scopesValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientScope.code, ClientConfigurationErrorMessage.clientScope.desc + \" Given value: \" + scopesValue + \".\");\n  };\n\n  ClientConfigurationError.createScopesRequiredError = function (scopesValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.scopesRequired.code, ClientConfigurationErrorMessage.scopesRequired.desc + \" Given value: \" + scopesValue);\n  };\n\n  ClientConfigurationError.createInvalidPromptError = function (promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\n  };\n\n  ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\n  };\n\n  ClientConfigurationError.createEmptyRequestError = function () {\n    var _a = ClientConfigurationErrorMessage.emptyRequestError,\n        code = _a.code,\n        desc = _a.desc;\n    return new ClientConfigurationError(code, desc);\n  };\n\n  ClientConfigurationError.createInvalidCorrelationIdError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCorrelationIdError.code, ClientConfigurationErrorMessage.invalidCorrelationIdError.desc);\n  };\n\n  ClientConfigurationError.createTelemetryConfigError = function (config) {\n    var _a = ClientConfigurationErrorMessage.telemetryConfigError,\n        code = _a.code,\n        desc = _a.desc;\n    var requiredKeys = {\n      applicationName: \"string\",\n      applicationVersion: \"string\",\n      telemetryEmitter: \"function\"\n    };\n    var missingKeys = Object.keys(requiredKeys).reduce(function (keys, key) {\n      return config[key] ? keys : keys.concat([key + \" (\" + requiredKeys[key] + \")\"]);\n    }, []);\n    return new ClientConfigurationError(code, desc + \" mising values: \" + missingKeys.join(\",\"));\n  };\n\n  return ClientConfigurationError;\n}(ClientAuthError);\n\nexport { ClientConfigurationError };","map":null,"metadata":{},"sourceType":"module"}