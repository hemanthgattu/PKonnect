{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { AadAuthority } from \"./AadAuthority\";\nimport { AuthorityType } from \"./Authority\";\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n/**\n * @hidden\n */\n\nvar B2cAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(B2cAuthority, _super);\n\n  function B2cAuthority(authority, validateAuthority) {\n    var _this = _super.call(this, authority, validateAuthority) || this;\n\n    var urlComponents = UrlUtils.GetUrlComponents(authority);\n    var pathSegments = urlComponents.PathSegments;\n\n    if (pathSegments.length < 3) {\n      throw ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;\n    }\n\n    _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\n    return _this;\n  }\n\n  Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return AuthorityType.B2C;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a promise with the TenantDiscoveryEndpoint\n   */\n\n  B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n          return [2\n          /*return*/\n          , this.DefaultOpenIdConfigurationEndpoint];\n        }\n\n        throw ClientConfigurationErrorMessage.unsupportedAuthorityValidation;\n      });\n    });\n  };\n\n  B2cAuthority.B2C_PREFIX = \"tfp\";\n  return B2cAuthority;\n}(AadAuthority);\n\nexport { B2cAuthority };","map":null,"metadata":{},"sourceType":"module"}