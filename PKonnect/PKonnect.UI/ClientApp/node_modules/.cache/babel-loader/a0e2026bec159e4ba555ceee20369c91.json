{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * accountIdentifier       combination of idToken.uid and idToken.utid\n * homeAccountIdentifier   combination of clientInfo.uid and clientInfo.utid\n * userName                idToken.preferred_username\n * name                    idToken.name\n * idToken                 idToken\n * sid                     idToken.sid - session identifier\n * environment             idtoken.issuer (the authority that issues the token)\n */\n\nvar Account =\n/** @class */\nfunction () {\n  /**\n   * Creates an Account Object\n   * @praram accountIdentifier\n   * @param homeAccountIdentifier\n   * @param userName\n   * @param name\n   * @param idToken\n   * @param sid\n   * @param environment\n   */\n  function Account(accountIdentifier, homeAccountIdentifier, userName, name, idTokenClaims, sid, environment) {\n    this.accountIdentifier = accountIdentifier;\n    this.homeAccountIdentifier = homeAccountIdentifier;\n    this.userName = userName;\n    this.name = name; // will be deprecated soon\n\n    this.idToken = idTokenClaims;\n    this.idTokenClaims = idTokenClaims;\n    this.sid = sid;\n    this.environment = environment;\n  }\n  /**\n   * @hidden\n   * @param idToken\n   * @param clientInfo\n   */\n\n\n  Account.createAccount = function (idToken, clientInfo) {\n    // create accountIdentifier\n    var accountIdentifier = idToken.objectId || idToken.subject; // create homeAccountIdentifier\n\n    var uid = clientInfo ? clientInfo.uid : \"\";\n    var utid = clientInfo ? clientInfo.utid : \"\";\n    var homeAccountIdentifier;\n\n    if (!StringUtils.isEmpty(uid) && !StringUtils.isEmpty(utid)) {\n      homeAccountIdentifier = CryptoUtils.base64Encode(uid) + \".\" + CryptoUtils.base64Encode(utid);\n    }\n\n    return new Account(accountIdentifier, homeAccountIdentifier, idToken.preferredName, idToken.name, idToken.claims, idToken.sid, idToken.issuer);\n  };\n  /**\n   * Utils function to compare two Account objects - used to check if the same user account is logged in\n   *\n   * @param a1: Account object\n   * @param a2: Account object\n   */\n\n\n  Account.compareAccounts = function (a1, a2) {\n    if (!a1 || !a2) {\n      return false;\n    }\n\n    if (a1.homeAccountIdentifier && a2.homeAccountIdentifier) {\n      if (a1.homeAccountIdentifier === a2.homeAccountIdentifier) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return Account;\n}();\n\nexport { Account };","map":null,"metadata":{},"sourceType":"module"}