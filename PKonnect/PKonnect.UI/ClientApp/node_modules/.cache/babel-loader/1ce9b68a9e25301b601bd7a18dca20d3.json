{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport * as tslib_1 from \"tslib\";\nimport { Authority, AuthorityType } from \"./Authority\";\nimport { XhrClient } from \"../XHRClient\";\nimport { AADTrustedHostList } from \"../utils/Constants\";\n/**\n * @hidden\n */\n\nvar AadAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AadAuthority, _super);\n\n  function AadAuthority(authority, validateAuthority) {\n    return _super.call(this, authority, validateAuthority) || this;\n  }\n\n  Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n    get: function () {\n      return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return AuthorityType.Aad;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns a promise which resolves to the OIDC endpoint\n   * Only responds with the endpoint\n   */\n\n  AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var client;\n      return tslib_1.__generator(this, function (_a) {\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n          return [2\n          /*return*/\n          , this.DefaultOpenIdConfigurationEndpoint];\n        }\n\n        client = new XhrClient();\n        return [2\n        /*return*/\n        , client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true).then(function (response) {\n          return response.tenant_discovery_endpoint;\n        })];\n      });\n    });\n  };\n  /**\n   * Checks to see if the host is in a list of trusted hosts\n   * @param {string} The host to look up\n   */\n\n\n  AadAuthority.prototype.IsInTrustedHostList = function (host) {\n    return AADTrustedHostList[host.toLowerCase()];\n  };\n\n  AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n  return AadAuthority;\n}(Authority);\n\nexport { AadAuthority };","map":null,"metadata":{},"sourceType":"module"}