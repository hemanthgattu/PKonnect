{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { CryptoUtils } from \"./utils/CryptoUtils\";\nimport { validateClaimsRequest } from \"./AuthenticationParameters\";\nimport { SSOTypes, Constants, PromptState, BlacklistedEQParams, libraryVersion } from \"./utils/Constants\";\nimport { ClientConfigurationError } from \"./error/ClientConfigurationError\";\nimport { StringUtils } from \"./utils/StringUtils\";\n/**\n * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\n * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12\n * @hidden\n */\n\nvar ServerRequestParameters =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @param authority\n   * @param clientId\n   * @param scope\n   * @param responseType\n   * @param redirectUri\n   * @param state\n   */\n  function ServerRequestParameters(authority, clientId, responseType, redirectUri, scopes, state, correlationId) {\n    this.authorityInstance = authority;\n    this.clientId = clientId;\n    this.nonce = CryptoUtils.createNewGuid(); // validate and populate state and correlationId\n\n    this.setRequestServerParams(scopes, state, correlationId, this.clientId); // telemetry information\n\n    this.xClientSku = \"MSAL.JS\";\n    this.xClientVer = libraryVersion();\n    this.responseType = responseType;\n    this.redirectUri = redirectUri;\n  }\n\n  Object.defineProperty(ServerRequestParameters.prototype, \"authority\", {\n    get: function () {\n      return this.authorityInstance ? this.authorityInstance.CanonicalAuthority : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   * @ignore\n   *\n   * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers\n   * @param request\n   * @param serverAuthenticationRequest\n   */\n\n  ServerRequestParameters.prototype.populateQueryParams = function (account, request, adalIdTokenObject) {\n    var queryParameters = {};\n\n    if (request) {\n      // add the prompt parameter to serverRequestParameters if passed\n      if (request.prompt) {\n        this.validatePromptParameter(request.prompt);\n        this.promptValue = request.prompt;\n      } // Add claims challenge to serverRequestParameters if passed\n\n\n      if (request.claimsRequest) {\n        validateClaimsRequest(request);\n        this.claimsValue = request.claimsRequest;\n      } // if the developer provides one of these, give preference to developer choice\n\n\n      if (ServerRequestParameters.isSSOParam(request)) {\n        queryParameters = this.constructUnifiedCacheQueryParameter(request, null);\n      }\n    }\n\n    if (adalIdTokenObject) {\n      queryParameters = this.constructUnifiedCacheQueryParameter(null, adalIdTokenObject);\n    }\n    /*\n     * adds sid/login_hint if not populated; populates domain_req, login_req and domain_hint\n     * this.logger.verbose(\"Calling addHint parameters\");\n     */\n\n\n    queryParameters = this.addHintParameters(account, queryParameters); // sanity check for developer passed extraQueryParameters\n\n    var eQParams;\n\n    if (request) {\n      eQParams = this.sanitizeEQParams(request);\n    } // Populate the extraQueryParameters to be sent to the server\n\n\n    this.queryParameters = ServerRequestParameters.generateQueryParametersString(queryParameters);\n    this.extraQueryParameters = ServerRequestParameters.generateQueryParametersString(eQParams);\n  }; // #region QueryParam helpers\n\n  /**\n   * @hidden\n   * @ignore\n   *\n   * Utility to test if valid prompt value is passed in the request\n   * @param request\n   */\n\n\n  ServerRequestParameters.prototype.validatePromptParameter = function (prompt) {\n    if ([PromptState.LOGIN, PromptState.SELECT_ACCOUNT, PromptState.CONSENT, PromptState.NONE].indexOf(prompt) < 0) {\n      throw ClientConfigurationError.createInvalidPromptError(prompt);\n    }\n  };\n  /**\n   * Constructs extraQueryParameters to be sent to the server for the AuthenticationParameters set by the developer\n   * in any login() or acquireToken() calls\n   * @param idTokenObject\n   * @param extraQueryParameters\n   * @param sid\n   * @param loginHint\n   */\n  // TODO: check how this behaves when domain_hint only is sent in extraparameters and idToken has no upn.\n\n\n  ServerRequestParameters.prototype.constructUnifiedCacheQueryParameter = function (request, idTokenObject) {\n    // preference order: account > sid > login_hint\n    var ssoType;\n    var ssoData;\n    var serverReqParam = {}; // if account info is passed, account.sid > account.login_hint\n\n    if (request) {\n      if (request.account) {\n        var account = request.account;\n\n        if (account.sid) {\n          ssoType = SSOTypes.SID;\n          ssoData = account.sid;\n        } else if (account.userName) {\n          ssoType = SSOTypes.LOGIN_HINT;\n          ssoData = account.userName;\n        }\n      } // sid from request\n      else if (request.sid) {\n          ssoType = SSOTypes.SID;\n          ssoData = request.sid;\n        } // loginHint from request\n        else if (request.loginHint) {\n            ssoType = SSOTypes.LOGIN_HINT;\n            ssoData = request.loginHint;\n          }\n    } // adalIdToken retrieved from cache\n    else if (idTokenObject) {\n        if (idTokenObject.hasOwnProperty(Constants.upn)) {\n          ssoType = SSOTypes.ID_TOKEN;\n          ssoData = idTokenObject.upn;\n        } else {\n          ssoType = SSOTypes.ORGANIZATIONS;\n          ssoData = null;\n        }\n      }\n\n    serverReqParam = this.addSSOParameter(ssoType, ssoData); // add the HomeAccountIdentifier info/ domain_hint\n\n    if (request && request.account && request.account.homeAccountIdentifier) {\n      serverReqParam = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, request.account.homeAccountIdentifier, serverReqParam);\n    }\n\n    return serverReqParam;\n  };\n  /**\n   * @hidden\n   *\n   * Adds login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time\n   * domain_hint can be one of users/organizations which when added skips the email based discovery process of the user\n   * domain_req utid received as part of the clientInfo\n   * login_req uid received as part of clientInfo\n   * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters\n   *\n   * @param {@link Account} account - Account for which the token is requested\n   * @param queryparams\n   * @param {@link ServerRequestParameters}\n   * @ignore\n   */\n\n\n  ServerRequestParameters.prototype.addHintParameters = function (account, qParams) {\n    /*\n     * This is a final check for all queryParams added so far; preference order: sid > login_hint\n     * sid cannot be passed along with login_hint or domain_hint, hence we check both are not populated yet in queryParameters\n     */\n    if (account && !qParams[SSOTypes.SID]) {\n      // sid - populate only if login_hint is not already populated and the account has sid\n      var populateSID = !qParams[SSOTypes.LOGIN_HINT] && account.sid && this.promptValue === PromptState.NONE;\n\n      if (populateSID) {\n        qParams = this.addSSOParameter(SSOTypes.SID, account.sid, qParams);\n      } // login_hint - account.userName\n      else {\n          var populateLoginHint = !qParams[SSOTypes.LOGIN_HINT] && account.userName && !StringUtils.isEmpty(account.userName);\n\n          if (populateLoginHint) {\n            qParams = this.addSSOParameter(SSOTypes.LOGIN_HINT, account.userName, qParams);\n          }\n        }\n\n      var populateReqParams = !qParams[SSOTypes.DOMAIN_REQ] && !qParams[SSOTypes.LOGIN_REQ];\n\n      if (populateReqParams) {\n        qParams = this.addSSOParameter(SSOTypes.HOMEACCOUNT_ID, account.homeAccountIdentifier, qParams);\n      }\n    }\n\n    return qParams;\n  };\n  /**\n   * Add SID to extraQueryParameters\n   * @param sid\n   */\n\n\n  ServerRequestParameters.prototype.addSSOParameter = function (ssoType, ssoData, ssoParam) {\n    if (!ssoParam) {\n      ssoParam = {};\n    }\n\n    if (!ssoData) {\n      return ssoParam;\n    }\n\n    switch (ssoType) {\n      case SSOTypes.SID:\n        {\n          ssoParam[SSOTypes.SID] = ssoData;\n          break;\n        }\n\n      case SSOTypes.ID_TOKEN:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          break;\n        }\n\n      case SSOTypes.LOGIN_HINT:\n        {\n          ssoParam[SSOTypes.LOGIN_HINT] = ssoData;\n          break;\n        }\n\n      case SSOTypes.ORGANIZATIONS:\n        {\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          break;\n        }\n\n      case SSOTypes.CONSUMERS:\n        {\n          ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n          break;\n        }\n\n      case SSOTypes.HOMEACCOUNT_ID:\n        {\n          var homeAccountId = ssoData.split(\".\");\n          var uid = CryptoUtils.base64Decode(homeAccountId[0]);\n          var utid = CryptoUtils.base64Decode(homeAccountId[1]); // TODO: domain_req and login_req are not needed according to eSTS team\n\n          ssoParam[SSOTypes.LOGIN_REQ] = uid;\n          ssoParam[SSOTypes.DOMAIN_REQ] = utid;\n\n          if (utid === Constants.consumersUtid) {\n            ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.CONSUMERS;\n          } else {\n            ssoParam[SSOTypes.DOMAIN_HINT] = SSOTypes.ORGANIZATIONS;\n          }\n\n          break;\n        }\n\n      case SSOTypes.LOGIN_REQ:\n        {\n          ssoParam[SSOTypes.LOGIN_REQ] = ssoData;\n          break;\n        }\n\n      case SSOTypes.DOMAIN_REQ:\n        {\n          ssoParam[SSOTypes.DOMAIN_REQ] = ssoData;\n          break;\n        }\n    }\n\n    return ssoParam;\n  };\n  /**\n   * @hidden\n   * @ignore\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\n   * @param request\n   */\n\n\n  ServerRequestParameters.prototype.sanitizeEQParams = function (request) {\n    var eQParams = request.extraQueryParameters;\n\n    if (!eQParams) {\n      return null;\n    }\n\n    if (request.claimsRequest) {\n      // this.logger.warning(\"Removed duplicate claims from extraQueryParameters. Please use either the claimsRequest field OR pass as extraQueryParameter - not both.\");\n      delete eQParams[Constants.claims];\n    }\n\n    BlacklistedEQParams.forEach(function (param) {\n      if (eQParams[param]) {\n        // this.logger.warning(\"Removed duplicate \" + param + \" from extraQueryParameters. Please use the \" + param + \" field in request object.\");\n        delete eQParams[param];\n      }\n    });\n    return eQParams;\n  };\n  /**\n   * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed\n   * @param extraQueryParameters\n   */\n\n\n  ServerRequestParameters.generateQueryParametersString = function (queryParameters) {\n    var paramsString = null;\n\n    if (queryParameters) {\n      Object.keys(queryParameters).forEach(function (key) {\n        if (paramsString == null) {\n          paramsString = key + \"=\" + encodeURIComponent(queryParameters[key]);\n        } else {\n          paramsString += \"&\" + key + \"=\" + encodeURIComponent(queryParameters[key]);\n        }\n      });\n    }\n\n    return paramsString;\n  };\n  /**\n   * @hidden\n   *\n   * Validate  scopes/state/correlationId set in the request by the user\n   * @param request\n   */\n\n\n  ServerRequestParameters.prototype.setRequestServerParams = function (scopes, state, correlationId, clientId) {\n    // set scope to clientId if null\n    this.scopes = scopes ? scopes.slice() : [clientId]; // append GUID to user set state  or set one for the user if null\n\n    this.state = state && !StringUtils.isEmpty(state) ? CryptoUtils.createNewGuid() + \"|\" + state : CryptoUtils.createNewGuid(); // validate user set correlationId or set one for the user if null\n\n    if (correlationId && !CryptoUtils.isGuid(correlationId)) {\n      throw ClientConfigurationError.createInvalidCorrelationIdError();\n    }\n\n    this.correlationId = correlationId && CryptoUtils.isGuid(correlationId) ? correlationId : CryptoUtils.createNewGuid();\n  }; // #endregion\n\n  /**\n   * Check to see if there are SSO params set in the Request\n   * @param request\n   */\n\n\n  ServerRequestParameters.isSSOParam = function (request) {\n    return request && (request.account || request.sid || request.loginHint);\n  };\n\n  return ServerRequestParameters;\n}();\n\nexport { ServerRequestParameters };","map":null,"metadata":{},"sourceType":"module"}